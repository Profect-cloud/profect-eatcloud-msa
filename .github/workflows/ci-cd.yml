name: CI/CD (develop → EC2)

on:
  push:
    branches: [ "develop" ]

concurrency:
  group: deploy-develop
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      # Dockerfile이 '내부에서 gradle build'를 한다면 이 단계는 옵션이지만,
      # Dockerfile이 'build/libs/*.jar'를 COPY하는 구조라면 필수입니다.
      - name: Build (Gradle)
        run: ./gradlew bootJar -x test --no-daemon

      - name: Docker Login (Hub)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/eatcloud-api:develop-${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/eatcloud-api:develop-latest

      - name: Copy compose to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.prod.yml"
          target: "/srv/eatcloud/"

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd /srv/eatcloud
            docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/eatcloud-api:develop-latest
            docker compose -f docker-compose.prod.yml up -d --remove-orphans
            docker image prune -f
