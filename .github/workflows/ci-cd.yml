name: ci-cd-compose

on:
  push:
    branches: [ "main", "develop" ]
  workflow_dispatch:

# 같은 브랜치에서 중복 실행 오면 이전 건 취소
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

# org 정책 때문에 GITHUB_TOKEN은 read만 필요
permissions:
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.sha }}
      image_repo: ${{ steps.repo.outputs.name_lc }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 레포 경로를 소문자로 변환(GHCR는 소문자 권장)
      - name: Lowercase repo name
        id: repo
        run: echo "name_lc=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Derive image tag (git sha)
        id: meta
        run: echo "sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      # PAT로 GHCR 로그인 (repo 권한이 read-only여도 OK)
      - name: Login to GHCR (with PAT)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      # Dockerfile 내부에서 gradle build → jar → 런타임 이미지 생성
      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ steps.repo.outputs.name_lc }}:${{ steps.meta.outputs.sha }}
            ghcr.io/${{ steps.repo.outputs.name_lc }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: SSH to EC2 & deploy via Compose
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
        env:
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}
          IMAGE_REPO: ${{ needs.build-and-push.outputs.image_repo }}
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          APP_DIR: ${{ secrets.APP_DIR }}
        script: |
          set -euo pipefail
          cd "$APP_DIR"

          # GHCR가 Private이면 패스가 필요. Public이어도 로그인해두면 pull이 빠름.
          echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USERNAME" --password-stdin

          IMAGE_PATH="ghcr.io/${IMAGE_REPO}:${IMAGE_TAG}"

          # .env의 APP_IMAGE 갱신(없으면 추가)
          if grep -q '^APP_IMAGE=' .env; then
            sed -i "s#^APP_IMAGE=.*#APP_IMAGE=${IMAGE_PATH}#g" .env
          else
            echo "APP_IMAGE=${IMAGE_PATH}" >> .env
          fi

          docker compose pull
          docker compose up -d --remove-orphans

      - name: Smoke test
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            for i in {1..10}; do
              curl -fsS http://localhost/actuator/health && exit 0
              sleep 3
            done
            echo "Health check failed"; exit 1
