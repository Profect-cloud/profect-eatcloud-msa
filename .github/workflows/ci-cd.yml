name: ci-cd-compose
on:
  push:
    branches: [ "develop", "main" ]
  workflow_dispatch:

# repo UI에서 "read only"여도 OK — 여기선 GITHUB_TOKEN로는 안 밀고 PAT로 미룸
permissions:
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.sha }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: '21', cache: 'maven' }

      - id: meta
        run: echo "sha=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      # PAT로 GHCR 로그인
      - name: Login to GHCR (PAT)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & Push to GHCR
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.sha }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: SSH & redeploy (login GHCR on EC2 too)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            set -e
            cd ${{ secrets.APP_DIR }}

            # 패키지가 Private이면 EC2에서도 PAT로 로그인
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

            NEW_TAG=${{ needs.build-and-push.outputs.image_tag }}
            sed -i "s#^APP_IMAGE=.*#APP_IMAGE=ghcr.io/${{ github.repository }}:${NEW_TAG}#g" .env

            docker compose pull
            docker compose up -d --remove-orphans

      - name: Smoke test
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            for i in {1..10}; do
              curl -fsS http://localhost/actuator/health && exit 0
              sleep 3
            done
            echo "Health check failed"; exit 1
